# Common definitions that each project's Makefile can use.
#
# Builds all view-*.scad into build/view-*.png.
# Generates make deps files at deps/view-*.png.deps.

include ../Makefile.paths

TARGETS_PNG=$(shell ls view-*.scad | sed -e 's/\.scad/\.png/g')

PROJECT_NAME=$(notdir $(basename $(CURDIR)))
MODEL_SCAD=${PROJECT_NAME}.scad
SRC_PARAMS_SCAD=params.scad
DEPS_PARAMS_SCAD=${DEPS_DIR}params.scad

.PHONY: all make_directories
all: make_directories ${TARGETS_PNG}

make_directories:
	-@mkdir -p ${DEPS_DIR}

%.png: %.scad
	${OPENSCAD} --hardwarnings -m make -o $@ -d ${DEPS_DIR}$(@F).deps --colorscheme Nature ${EXTRA_OPTS} ${CAMERA_OPT} $<

%.png: EXTRA_OPTS=$(shell grep "//cmdline:" $< | sed -e "s,//cmdline:,,g")
%.png: CAMERA_OPT=$(shell ${OPENSCAD} --export-format echo -o - $< | grep "camera" | sed -e 's/.*"\(.*\)"/\1/')

# First create a dummy scad that calls all the zero-arg parameters and
# echos their names and values to the log, as sed commands to replace
# {{name}} with value.  Then actually run that scad, and save those
# outputs to parameters.sed.
${DEPS_DIR}parameters.sed: ${MODEL_SCAD} ${SRC_PARAMS_SCAD}
	@echo "include <../${SRC_PARAMS_SCAD}>" > ${DEPS_PARAMS_SCAD}
	@echo "use <../${MODEL_SCAD}>" >> ${DEPS_PARAMS_SCAD}
	@echo "function sigfig2(x) = is_num(x) ? round(100 * x) / 100 : x;" >> ${DEPS_PARAMS_SCAD}
	grep -E "^[a-zA-Z0-9_]+ *=" ${SRC_PARAMS_SCAD} | sed -e 's+\([a-zA-Z0-9_]*\).*+echo(str("s/{{\1}}/", \1, "/g"));+' >> ${DEPS_PARAMS_SCAD}
	grep -E "^function.*\(\)" ${MODEL_SCAD} | sed -e 's+function \([a-zA-Z0-9_]*\).*+echo(str("s/{{\1}}/", sigfig2(\1()), "/g"));+' >> ${DEPS_PARAMS_SCAD}
	${OPENSCAD} --export-format echo -o - ${DEPS_PARAMS_SCAD} | grep ECHO | sed -e 's/.*"\(.*\)"/\1/' > ${DEPS_DIR}parameters.sed

clean:
	-@rm -r *.png ${DEPS_DIR}

# explicit wildcard expansion suppresses errors when no files are found
include $(wildcard ${DEPS_DIR}*.deps)
