# Common definitions that each project's Makefile can use.
#
# Builds all view-*.scad into build/view-*.png.
# Generates make deps files at deps/view-*.png.deps.
#
# Builds an index.html by inserting the contents of the project's
# index.html into the template.html file in this directory. The first
# line is inserted wherever `{{title}}` appears in the template, and
# the rest is inserted where `{{body}}` appears.

include ../Makefile.paths

TARGETS_PNG=$(shell ls view-*.scad | sed -e 's/\.scad/\.png/g' -e "s,^,${BUILD_DIR},g")
TARGETS_HTML=$(shell ls *.html | sed -e "s,^,${BUILD_DIR},g")

MODEL_SCAD=$(notdir $(basename $(CURDIR))).scad

.PHONY: all make_directories
all: make_directories ${TARGETS_PNG} ${TARGETS_HTML}

make_directories:
	-@mkdir -p ${BUILD_DIR}
	-@mkdir -p ${DEPS_DIR}

${BUILD_DIR}%.png: %.scad
	${OPENSCAD} --hardwarnings -m make -o $@ -d ${DEPS_DIR}$(@F).deps --colorscheme Nature ${EXTRA_OPTS} ${CAMERA_OPT} $<

%.png: EXTRA_OPTS=$(shell grep "//cmdline:" $< | sed -e "s,//cmdline:,,g")
%.png: CAMERA_OPT=$(shell ${OPENSCAD} --export-format echo -o - $< | grep "camera" | sed -e 's/.*"\(.*\)"/\1/')

# First create a dummy scad that calls all the zero-arg parameters and
# echos their names and values to the log, as sed commands to replace
# {{name}} with value.  Then actually run that scad, and save those
# outputs to parameters.sed.
${DEPS_DIR}parameters.sed: ${MODEL_SCAD}
	echo "use <../${MODEL_SCAD}>" > ${DEPS_DIR}parameters.scad
	echo "function sigfig2(x) = is_num(x) ? round(100 * x) / 100 : x;" >> ${DEPS_DIR}parameters.scad
	grep -E "^function.*()" ${MODEL_SCAD} | sed -e 's+function \([a-zA-Z0-9_]*\).*+echo(str("s/{{\1}}/", sigfig2(\1()), "/g"));+' >> ${DEPS_DIR}parameters.scad
	${OPENSCAD} -o ${DEPS_DIR}parameters.png ${DEPS_DIR}parameters.scad 2>&1 | grep ECHO | sed -e 's/.*"\(.*\)"/\1/' > ${DEPS_DIR}parameters.sed

${BUILD_DIR}%.html: %.html ../common/project.html ../common/template.html ${DEPS_DIR}parameters.sed
	tail +2 $< | sed -f ${DEPS_DIR}parameters.sed | sed -e '/{{body}}/r /dev/stdin' -e 's/{{body}}//' -e 's/{{title}}/${TITLE}/' ../common/project.html | sed -e '/{{body}}/r /dev/stdin' -e 's/{{body}}//' -e 's/{{subtitle}}/: ${TITLE}/' ../common/template.html > $@

${BUILD_DIR}%.html: TITLE=$(shell head -1 $<)

clean:
	-@rm -r ${BUILD_DIR} ${DEPS_DIR}

# explicit wildcard expansion suppresses errors when no files are found
include $(wildcard ${DEPS_DIR}*.deps)
